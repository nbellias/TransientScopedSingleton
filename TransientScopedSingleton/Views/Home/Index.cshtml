@{
    ViewData["Title"] = "Home Page";
}

<div class="text-center">
    <h2 class="display-4">
        Dependency Injection Lifetime
    </h2>
</div>
<table class="table table-bordered">
    <thead>
        <tr>
            <th>Service Type</th>
            <th>First Instance Operation ID</th>
            <th>Second Instance Operation ID</th>
        </tr>
    </thead>
    <tbody>
        <tr>
            <td style="background-color: darksalmon">
                Transient
            </td>
            <td style="background-color: darksalmon">
                @ViewBag.transient1
            </td>
            <td style="background-color: darksalmon">
                @ViewBag.transient2
            </td>
        </tr>
        <tr>
            <td>Scoped</td>
            <td>@ViewBag.scoped1</td>
            <td>@ViewBag.scoped2</td>
        </tr>
        <tr>
            <td style="background-color: aquamarine">
                Singleton
            </td>
            <td style="background-color: aquamarine">
                @ViewBag.singleton1
            </td>
            <td style="background-color: aquamarine">
                @ViewBag.singleton2
            </td>
        </tr>
    </tbody>
</table>

<p>Transient service always returns a new instance even though it’s the same request, that is why operation Ids are different for first instance and second instance for both the requests (Request 1 and Request 2).</P>
<p>In the case of Scoped service, a single instance is created per request and the same instance is shared across the request. That is why operation Ids are the same for first instance as well as second instance of Request 1. But if we click on refresh button or load the UI on different tab of a browser (which is nothing but Request 2), new ids are generated.</p>
<p>In the case of Singleton service, only one instance is created and shared across applications. If we click on refresh button or load the UI on the different tab of a browser (which is nothing but Request 2), those ids will remain the same.</p>
<p>
    Once we execute the application, we will see two different Guids are displayed for their respective service types. <strong>Now run two instances of UI in two different tabs of the browser like request 1 and request 2.</strong>
</p>
<div>
    <h3>Summary</h3>
    <ul>
        <li>With a transient service, a new instance is provided every time an instance is requested whether it is in the scope of same http request or across different http requests.</li>
        <li>With a scoped service we get the same instance within the scope of a given http request but a new instance across different http requests.</li>
        <li>With ths singleton service, there is only a single instance. An instance is created, when service is first requested and that single instance single instance will be used by all subsequent http request throughout the application.</li>
    </ul>
</div>
